// custom.config
// usage: nextflow run epidiverse/dmr [OPTIONS] -c /path/to/custom.config
//
// use this file to configure jobs on your own grid machine
// conda/docker/singularity is required for pipeline dependencies
//
// refer here to determine executor support
// https://www.nextflow.io/docs/latest/executor.html
//
// example with PBSPRO:
//

conda.cacheDir = "/path/to/shared/environments"
singularity.cacheDir = "/path/to/shared/containers"
singularity.enabled = false
docker.enabled = false


executor {

	$pbspro {
		jobName = { "${task.name}".replaceAll("\\s","") }
		submitRateLimit = '20 min'
		queueSize = 20
		pollInterval = '30 sec'
	}
}


process {

	executor = 'pbspro'

	// with conda
	module = ['Miniconda3']
	conda = "${baseDir}/env/environment.yml"

	// with docker/singularity
	container = "epidiverse/ewas"


	// top-level configuration labels for groups of processes
	withLabel: "low" {
    	time = { 2.h * task.attempt }
    	memory = { 2.GB * task.attempt }
    	cpus = { 2 * task.attempt }
	}

	withLabel: "high" {
    	time = { 16.h * task.attempt }
    	memory = { 24.GB * task.attempt }
    	cpus = { 8 * task.attempt }
	}

	// label processes which should kill the pipeline if they fail
	withLabel: "finish" {
        errorStrategy = { task.exitStatus in [140,141,143,137,104,134,139] ?
			(task.attempt > 3 ? 'finish' : 'retry') :
			sleep(Math.pow(2, task.attempt) * 1000 as long); task.attempt > 1 ? 'finish' : 'retry'}
        maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 1 }

	}

	// label processes which can be safely ignored if they fail
	withLabel: "ignore" {
       errorStrategy = { task.exitStatus in [140,141,143,137,104,134,139] ?
			(task.attempt > 3 ? 'ignore' : 'retry') :
			sleep(Math.pow(2, task.attempt) * 1000 as long); task.attempt > 1 ? 'ignore' : 'retry'}
        maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 3 : 1 }

	}


	// configuration for parsing process
	withName: "parsing" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for tabix process
	withName: "tabix" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for bcftools process
	withName: "bcftools" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for vcftools_missing process
	withName: "vcftools_missing" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for vcftools_extract process
	withName: "vcftools_extract" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for filtering process
	withName: "filtering" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for bedtools_unionbedg
	withName: "bedtools_unionbedg" {
	
		// label 'low'
		// label 'finish'
		time = { 6.h * task.attempt }
    	errorStrategy = { task.exitStatus in [140,141,143,137,104,134,139] ?
			(task.attempt > 5 ? 'finish' : 'retry') :
			sleep(Math.pow(2, task.attempt) * 1000 as long); task.attempt > 2 ? 'finish' : 'retry'}
        maxRetries = { task.exitStatus in [140,141,143,137,104,134,139] ? 5 : 2 }
	}


	// configuration for bedtools_intersect process
	withName: "bedtools_intersect" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for filter_regions process
	withName: "filter_regions" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for bedtools_merge process
	withName: "bedtools_merge" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for average_over_regions process
	withName: "average_over_regions" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for split_scaffolds process
	withName: "split_scaffolds" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for GEM_Emodel process
	withName: "GEM_Emodel" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for GEM_Gmodel process
	withName: "GEM_Gmodel" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for GEM_GxEmodel process
	withName: "GEM_GxEmodel" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for calculate_FDR process
	withName: "calculate_FDR" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for qqPlot process
	withName: "qqPlot" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for dotPlot process
	withName: "dotPlot" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for manhattan process
	withName: "manhattan" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}


	// configuration for topKplots process
	withName: "topKplots" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}
	
	
	// configuration for BEAGLE_SNP_Imputation process
	withName: "BEAGLE_SNP_Imputation" {

    	//time = { 2.h * task.attempt }
    	//memory = { 2.GB * task.attempt }
    	//cpus = { 2 * task.attempt }
	}

}
