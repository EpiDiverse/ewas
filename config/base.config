// base.config
// use this config file to modify process resource allocation

// DEFINE LOCALE
env {
	LC_ALL = "C"
}

// PROCESS RESOURCES
process {

	// top-level configuration labels for groups of processes
	withLabel: "low" {
    	time = { 1.h * Math.pow(2, task.attempt) }
    	memory = { 1.GB * Math.pow(2, task.attempt) }
    	cpus = 2
	}

	withLabel: "high" {
    	time = { 4.h * Math.pow(2, task.attempt) }
    	memory = { 8.GB * Math.pow(3, task.attempt) }
    	cpus = { 8 * task.attempt }
	}

	// label processes which should kill the pipeline if they fail
	withLabel: "finish" {
		maxRetries = 3
        errorStrategy = { ->
			if( (task.exitStatus in [140,141,143,137,104,134,139] && task.attempt > 3) || (!(task.exitStatus in [140,141,143,137,104,134,139]) && task.attempt > 1 ) ){
				return 'finish'
			} else if(task.exitStatus in [140,141,143,137,104,134,139]){
				return 'retry'
			} else {
				sleep(Math.pow(2, task.attempt) * 1000 as long);
				return 'retry'
			}
		}
	}

	// label processes which can be safely ignored if they fail
	withLabel: "ignore" {
        maxRetries = 3
        errorStrategy = { ->
			if( (task.exitStatus in [140,141,143,137,104,134,139] && task.attempt > 3) || (!(task.exitStatus in [140,141,143,137,104,134,139]) && task.attempt > 1 ) ){
				return 'ignore'
			} else if(task.exitStatus in [140,141,143,137,104,134,139]){
				return 'retry'
			} else {
				sleep(Math.pow(2, task.attempt) * 1000 as long);
				return 'retry'
			}
		}

	}

	// configuration for bedtools_unionbedg
	withName: "bedtools_unionbedg" {
	
		// label 'low'
		// label 'finish'
		time = { 3.h * Math.pow(2, task.attempt) }
	}

	// configuration for bedtools_filtering
	withName: "bedtools_filtering" {
	
		// label 'low'
		// label 'finish'
		time = { 3.h * Math.pow(2, task.attempt) }
	}

	// configuration for bedtools_sorting
	withName: "bedtools_sorting" {
	
		// label 'low'
		// label 'finish'
		time = { 3.h * Math.pow(2, task.attempt) }
	}

	withName: "bcftools" {
		time = { 3.h * Math.pow(2, task.attempt) }
	}
	
	
	// got an error with DMPs due to time limit so I increased it (Nilay)
	withName: "calculate_FDR" {

		time = { 4.h * Math.pow(2, task.attempt) }
	}
	
		
}
